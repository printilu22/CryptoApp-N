{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ilusa\\\\OneDrive\\\\Desktop\\\\New folder\\\\Cryptoapp\\\\client\\\\src\\\\components\\\\LineChart.jsx\";\nimport React from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\nimport millify from 'millify';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nconst LineChart = ({\n  coinHistory,\n  currentPrice,\n  coinName\n}) => {\n  var _coinHistory$data, _coinHistory$data$his, _coinHistory$data2, _coinHistory$data2$hi, _coinHistory$data3;\n  // Ensure to parse timestamps correctly depending on the format (seconds or milliseconds)\n  const prices = (coinHistory === null || coinHistory === void 0 ? void 0 : (_coinHistory$data = coinHistory.data) === null || _coinHistory$data === void 0 ? void 0 : (_coinHistory$data$his = _coinHistory$data.history) === null || _coinHistory$data$his === void 0 ? void 0 : _coinHistory$data$his.map(item => item.price)) || [];\n  const timestamps = (coinHistory === null || coinHistory === void 0 ? void 0 : (_coinHistory$data2 = coinHistory.data) === null || _coinHistory$data2 === void 0 ? void 0 : (_coinHistory$data2$hi = _coinHistory$data2.history) === null || _coinHistory$data2$hi === void 0 ? void 0 : _coinHistory$data2$hi.map(item => {\n    const date = new Date(item.timestamp * 1000); // Adjust this line if your timestamps are in seconds\n    return date.toLocaleDateString(); // Convert to locale date string\n  })) || [];\n  const data = {\n    labels: timestamps,\n    datasets: [{\n      label: `${coinName} Price (Past ${coinHistory === null || coinHistory === void 0 ? void 0 : (_coinHistory$data3 = coinHistory.data) === null || _coinHistory$data3 === void 0 ? void 0 : _coinHistory$data3.timeframe})`,\n      data: prices,\n      fill: false,\n      borderColor: '#0071ff',\n      tension: 0.1\n    }]\n  };\n  const options = {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: 'top'\n      },\n      tooltip: {\n        callbacks: {\n          label: context => {\n            return `${context.dataset.label}: $${millify(context.raw)}`;\n          }\n        }\n      }\n    },\n    scales: {\n      y: {\n        title: {\n          display: true,\n          text: 'Price (USD)'\n        },\n        ticks: {\n          callback: value => `$${millify(value)}`\n        }\n      },\n      x: {\n        title: {\n          display: true,\n          text: 'Date'\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [coinName, \" Price Chart\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      data: data,\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '20px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Current Price:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this), \" $\", currentPrice]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 9\n  }, this);\n};\n_c = LineChart;\nexport default LineChart;\nvar _c;\n$RefreshReg$(_c, \"LineChart\");","map":{"version":3,"names":["React","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","millify","jsxDEV","_jsxDEV","register","LineChart","coinHistory","currentPrice","coinName","_coinHistory$data","_coinHistory$data$his","_coinHistory$data2","_coinHistory$data2$hi","_coinHistory$data3","prices","data","history","map","item","price","timestamps","date","Date","timestamp","toLocaleDateString","labels","datasets","label","timeframe","fill","borderColor","tension","options","responsive","plugins","legend","position","tooltip","callbacks","context","dataset","raw","scales","y","title","display","text","ticks","callback","value","x","children","fileName","_jsxFileName","lineNumber","columnNumber","style","marginTop","_c","$RefreshReg$"],"sources":["C:/Users/ilusa/OneDrive/Desktop/New folder/Cryptoapp/client/src/components/LineChart.jsx"],"sourcesContent":["import React from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\r\nimport millify from 'millify';\r\n\r\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\r\n\r\nconst LineChart = ({ coinHistory, currentPrice, coinName }) => {\r\n    // Ensure to parse timestamps correctly depending on the format (seconds or milliseconds)\r\n    const prices = coinHistory?.data?.history?.map((item) => item.price) || [];\r\n    const timestamps = coinHistory?.data?.history?.map((item) => {\r\n        const date = new Date(item.timestamp * 1000); // Adjust this line if your timestamps are in seconds\r\n        return date.toLocaleDateString(); // Convert to locale date string\r\n    }) || [];\r\n\r\n    const data = {\r\n        labels: timestamps,\r\n        datasets: [\r\n            {\r\n                label: `${coinName} Price (Past ${coinHistory?.data?.timeframe})`,\r\n                data: prices,\r\n                fill: false,\r\n                borderColor: '#0071ff',\r\n                tension: 0.1,\r\n            },\r\n        ],\r\n    };\r\n\r\n    const options = {\r\n        responsive: true,\r\n        plugins: {\r\n            legend: {\r\n                position: 'top',\r\n            },\r\n            tooltip: {\r\n                callbacks: {\r\n                    label: (context) => {\r\n                        return `${context.dataset.label}: $${millify(context.raw)}`;\r\n                    },\r\n                },\r\n            },\r\n        },\r\n        scales: {\r\n            y: {\r\n                title: {\r\n                    display: true,\r\n                    text: 'Price (USD)',\r\n                },\r\n                ticks: {\r\n                    callback: (value) => `$${millify(value)}`,\r\n                },\r\n            },\r\n            x: {\r\n                title: {\r\n                    display: true,\r\n                    text: 'Date',\r\n                },\r\n            },\r\n        },\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h2>{coinName} Price Chart</h2>\r\n            <Line data={data} options={options} />\r\n            <div style={{ marginTop: '20px' }}>\r\n                <strong>Current Price:</strong> ${currentPrice}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LineChart;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}