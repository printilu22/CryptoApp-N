{"ast":null,"code":"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\n\n// Use environment variables for API configuration\nconst cryptoApiHeaders = {\n  'x-rapidapi-host': process.env.REACT_APP_RAPIDAPI_HOST,\n  // Fallback to default if not set\n  'x-rapidapi-key': process.env.REACT_APP_RAPIDAPI_KEY // Ensure the key is set in the .env file\n};\n\n// Base URL configuration for CoinRanking API\nconst baseUrl = process.env.REACT_APP_BASE_URL || 'https://coinranking1.p.rapidapi.com'; // Update to the correct base URL\n\n// Function to create request configuration\nconst createRequest = url => ({\n  url,\n  headers: cryptoApiHeaders\n});\n\n// Define the crypto API using Redux Toolkit's createApi\nexport const cryptoApi = createApi({\n  reducerPath: 'cryptoApi',\n  // Unique key for the API reducer in Redux store\n  baseQuery: fetchBaseQuery({\n    baseUrl\n  }),\n  // Base URL for all API requests\n  endpoints: builder => ({\n    // Fetch list of cryptocurrencies\n    getCryptos: builder.query({\n      query: count => createRequest(`/coins?limit=${count}`) // API endpoint with dynamic query parameter\n    }),\n    // Fetch details of a specific cryptocurrency\n    getCryptoDetails: builder.query({\n      query: coinId => createRequest(`/coin/${coinId}`) // API endpoint for coin details\n    }),\n    // Fetch historical data for a specific cryptocurrency\n    getCryptoHistory: builder.query({\n      query: ({\n        coinId,\n        timeperiod\n      }) => createRequest(`/coin/${coinId}/history?timeperiod=${timeperiod}`) // API endpoint with multiple query parameters\n    })\n  })\n});\n\n// Export hooks for usage in functional components\nexport const {\n  useGetCryptosQuery,\n  useGetCryptoDetailsQuery,\n  useGetCryptoHistoryQuery\n} = cryptoApi;","map":{"version":3,"names":["createApi","fetchBaseQuery","cryptoApiHeaders","process","env","REACT_APP_RAPIDAPI_HOST","REACT_APP_RAPIDAPI_KEY","baseUrl","REACT_APP_BASE_URL","createRequest","url","headers","cryptoApi","reducerPath","baseQuery","endpoints","builder","getCryptos","query","count","getCryptoDetails","coinId","getCryptoHistory","timeperiod","useGetCryptosQuery","useGetCryptoDetailsQuery","useGetCryptoHistoryQuery"],"sources":["C:/Users/ilusa/OneDrive/Desktop/New folder/Cryptoapp/client/src/services/cryptoApi.js"],"sourcesContent":["import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\r\n\r\n// Use environment variables for API configuration\r\nconst cryptoApiHeaders = {\r\n  'x-rapidapi-host': process.env.REACT_APP_RAPIDAPI_HOST , // Fallback to default if not set\r\n  'x-rapidapi-key': process.env.REACT_APP_RAPIDAPI_KEY, // Ensure the key is set in the .env file\r\n};\r\n\r\n// Base URL configuration for CoinRanking API\r\nconst baseUrl = process.env.REACT_APP_BASE_URL || 'https://coinranking1.p.rapidapi.com'; // Update to the correct base URL\r\n\r\n// Function to create request configuration\r\nconst createRequest = (url) => ({\r\n  url,\r\n  headers: cryptoApiHeaders,\r\n});\r\n\r\n// Define the crypto API using Redux Toolkit's createApi\r\nexport const cryptoApi = createApi({\r\n  reducerPath: 'cryptoApi', // Unique key for the API reducer in Redux store\r\n  baseQuery: fetchBaseQuery({ baseUrl }), // Base URL for all API requests\r\n  endpoints: (builder) => ({\r\n    // Fetch list of cryptocurrencies\r\n    getCryptos: builder.query({\r\n      query: (count) => createRequest(`/coins?limit=${count}`), // API endpoint with dynamic query parameter\r\n    }),\r\n\r\n    // Fetch details of a specific cryptocurrency\r\n    getCryptoDetails: builder.query({\r\n      query: (coinId) => createRequest(`/coin/${coinId}`), // API endpoint for coin details\r\n    }),\r\n\r\n    // Fetch historical data for a specific cryptocurrency\r\n    getCryptoHistory: builder.query({\r\n      query: ({ coinId, timeperiod }) => createRequest(`/coin/${coinId}/history?timeperiod=${timeperiod}`), // API endpoint with multiple query parameters\r\n    }),\r\n  }),\r\n});\r\n\r\n// Export hooks for usage in functional components\r\nexport const {\r\n  useGetCryptosQuery,\r\n  useGetCryptoDetailsQuery,\r\n  useGetCryptoHistoryQuery,\r\n} = cryptoApi;\r\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,cAAc,QAAQ,8BAA8B;;AAExE;AACA,MAAMC,gBAAgB,GAAG;EACvB,iBAAiB,EAAEC,OAAO,CAACC,GAAG,CAACC,uBAAuB;EAAG;EACzD,gBAAgB,EAAEF,OAAO,CAACC,GAAG,CAACE,sBAAsB,CAAE;AACxD,CAAC;;AAED;AACA,MAAMC,OAAO,GAAGJ,OAAO,CAACC,GAAG,CAACI,kBAAkB,IAAI,qCAAqC,CAAC,CAAC;;AAEzF;AACA,MAAMC,aAAa,GAAIC,GAAG,KAAM;EAC9BA,GAAG;EACHC,OAAO,EAAET;AACX,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMU,SAAS,GAAGZ,SAAS,CAAC;EACjCa,WAAW,EAAE,WAAW;EAAE;EAC1BC,SAAS,EAAEb,cAAc,CAAC;IAAEM;EAAQ,CAAC,CAAC;EAAE;EACxCQ,SAAS,EAAGC,OAAO,KAAM;IACvB;IACAC,UAAU,EAAED,OAAO,CAACE,KAAK,CAAC;MACxBA,KAAK,EAAGC,KAAK,IAAKV,aAAa,CAAC,gBAAgBU,KAAK,EAAE,CAAC,CAAE;IAC5D,CAAC,CAAC;IAEF;IACAC,gBAAgB,EAAEJ,OAAO,CAACE,KAAK,CAAC;MAC9BA,KAAK,EAAGG,MAAM,IAAKZ,aAAa,CAAC,SAASY,MAAM,EAAE,CAAC,CAAE;IACvD,CAAC,CAAC;IAEF;IACAC,gBAAgB,EAAEN,OAAO,CAACE,KAAK,CAAC;MAC9BA,KAAK,EAAEA,CAAC;QAAEG,MAAM;QAAEE;MAAW,CAAC,KAAKd,aAAa,CAAC,SAASY,MAAM,uBAAuBE,UAAU,EAAE,CAAC,CAAE;IACxG,CAAC;EACH,CAAC;AACH,CAAC,CAAC;;AAEF;AACA,OAAO,MAAM;EACXC,kBAAkB;EAClBC,wBAAwB;EACxBC;AACF,CAAC,GAAGd,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}